{"version":3,"sources":["Comp/Comp.js","App.js","index.js"],"names":["Comp","card","handlechoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","firstchoice","setFirstChoice","secondChoice","setSecondChoice","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevCard","resetTurn","setTimeout","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAEe,SAASA,EAAT,GAA0D,IAA1CC,EAAyC,EAAzCA,KAAOC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,SAQ3D,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAYF,EAAU,UAAY,GAAvC,UACE,qBAAKE,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,eAC1C,qBAAKF,UAAU,OAAOC,IAAI,iBAAiBE,QAV7B,WACdJ,GACFF,EAAaD,IAQsDM,IAAI,eCV7E,IAAME,EAAa,CACjB,CAAE,IAAO,yBAA0BC,SAAQ,GAC3C,CAAE,IAAO,gBAAiBA,SAAQ,GAClC,CAAE,IAAO,gBAAgBA,SAAQ,GACjC,CAAE,IAAO,kBAAkBA,SAAQ,GACnC,CAAE,IAAO,0BAA0BA,SAAQ,GAC3C,CAAE,IAAO,gBAAgBA,SAAQ,IA6FpBC,MA1Ff,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAsCJ,mBAAS,MAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOR,EAAP,KAAiBiB,EAAjB,KAKMC,EAAe,WACnB,IAAMC,EAAgB,UAAId,EAAeA,GACtCe,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAAA1B,GAAI,kCAAUA,GAAV,IAAgB2B,GAAIH,KAAKC,cAEpCZ,EAASS,GACTL,EAAe,MACfE,EAAgB,MAEhBJ,EAAS,IAGLd,EAAe,SAACD,GAEpBgB,EAAcG,EAAgBnB,GAAQiB,EAAejB,IAIvD4B,qBAAU,WAEJZ,GAAeE,IAGjBE,GAAY,GACRJ,EAAYX,MAAQa,EAAab,KAEnCQ,GAAW,SAAAgB,GACT,OAAOA,EAASH,KAAI,SAAA1B,GAClB,OAAGA,EAAKK,MAAQW,EAAYX,IAEnB,2BAAIL,GAAX,IAAkBS,SAAQ,IAGnBT,QAIb8B,KAGAC,YAAW,kBAAKD,MAAc,QAIjC,CAACd,EAAaE,IAGjB,IAAMY,EAAY,WAChBb,EAAe,MACfE,EAAgB,MAChBJ,GAAS,SAAAiB,GAAS,OAAIA,EAAY,KAClCZ,GAAY,IAOd,OAJAQ,qBAAU,WACRP,MACA,IAGA,sBAAKjB,UAAU,MAAf,UACE,6CACA,wBAAQG,QAASc,EAAjB,sBAEA,qBAAKjB,UAAU,YAAf,SACGQ,EAAMc,KAAI,SAAA1B,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAgBA,EAChBC,QAAWF,IAASgB,GAAehB,IAASkB,GAAgBlB,EAAKS,QAEjEN,SAAYA,GALPH,EAAK2B,SAShB,yCAAYb,SC7FlBmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.96fa45d9.chunk.js","sourcesContent":["import './Comp.css'\r\n\r\nexport default function Comp({ card , handlechoice ,flipped ,disabled}) {\r\n\r\n  const handleclick = () => {\r\n    if(!disabled){\r\n      handlechoice(card)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className={ flipped ? \"flipped\" : \"\"}>\r\n        <img className=\"front\" src={card.src} alt=\"card front\" />\r\n        <img className=\"back\" src=\"/img/cover.jpg\" onClick={handleclick} alt=\"cover\" />\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useEffect, useState } from 'react'\nimport './App.css'\nimport Comp from './Comp/Comp'\n\nconst cardImages = [\n  { \"src\": \"/img/black-panther.jpg\" ,matched:false},\n  { \"src\": \"/img/m416.jpg\" ,matched:false},\n  { \"src\": \"/img/iron.jpg\",matched:false },\n  { \"src\": \"/img/spider.jpg\",matched:false },\n  { \"src\": \"/img/captain-marvel.jpg\",matched:false },\n  { \"src\": \"/img/thor.jpg\",matched:false },\n]\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [turns, setTurns] = useState(0)\n  const [firstchoice, setFirstChoice] = useState(null)\n  const [secondChoice, setSecondChoice] = useState(null)\n  const [disabled, setDisabled] = useState(false)\n\n  \n\n  // shuffle cards for new game\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map(card => ({ ...card, id: Math.random() }))\n          \n    setCards(shuffledCards)\n    setFirstChoice(null)\n    setSecondChoice(null)\n\n    setTurns(0)\n  }\n\n  const handlechoice = (card) => {\n    \n    firstchoice ? setSecondChoice(card) : setFirstChoice(card)\n    \n    \n  }\n  useEffect(() => {\n \n    if (firstchoice && secondChoice) {\n      \n\n      setDisabled(true)\n      if (firstchoice.src === secondChoice.src) {\n\n        setCards ( prevCard => {\n          return prevCard.map(card =>{\n            if(card.src === firstchoice.src){\n\n              return {...card , matched:true}\n\n            }else{\n              return card\n            }\n          })\n        })\n        resetTurn()\n      } else {\n        \n        setTimeout(()=> resetTurn() , 1000)\n      }\n\n    }\n  }, [firstchoice, secondChoice])\n\n  // reset choices & increase turn\n  const resetTurn = () => {\n    setFirstChoice(null)\n    setSecondChoice(null)\n    setTurns(prevTurns => prevTurns + 1)\n    setDisabled(false)\n  }\n\n  useEffect(() => {\n    shuffleCards()\n  },[])\n\n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n        {cards.map(card => (\n          <Comp \n            key={card.id}\n            card={card}\n            handlechoice = {handlechoice}\n            flipped = {card === firstchoice || card === secondChoice || card.matched}\n            // finished = {card.matched != false}\n            disabled = {disabled}\n          />\n        ))}\n      </div>\n      <p>Turns : {turns}</p>\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}